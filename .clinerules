# filesystem-mcp-server Developer Cheatsheet

**Goal**: This project aims to create a Model Context Protocol (MCP) server providing robust, platform-agnostic file system capabilities. Key features include reading files, writing files, advanced search/replace operations within files, and directory tree traversal.

This cheatsheet provides quick references for common patterns and utilities within the `filesystem-mcp-server` codebase.

## Core Utilities Integration

### 1. Logging (`src/utils/logger.ts`)

- **Purpose**: Structured logging for debugging and monitoring. Logs to files in the `logs/` directory.
- **Usage**: Import the singleton `logger` instance. Pass a `context` object (usually `RequestContext` or a derivative) for correlation.

```typescript
import { logger } from './src/utils/logger.js';
import { RequestContext } from './src/utils/requestContext.js'; // Or OperationContext, ToolContext etc.

// Inside a function or handler
const operationContext: RequestContext = /* ... get or create context ... */;

logger.info("Processing request", operationContext);
logger.debug("Detailed step info", { ...operationContext, data: someData });
logger.warn("Potential issue detected", operationContext);
logger.error("An error occurred", { ...operationContext, error: err.message });
```

- **Key Files**:
  - `src/utils/logger.ts`: Logger implementation using Winston.
  - `logs/`: Directory where log files are stored (e.g., `combined.log`, `error.log`).

### 2. Error Handling (`src/types-global/errors.ts`, `src/utils/errorHandler.ts`)

- **Purpose**: Standardized error objects (`McpError`) with specific error codes (`BaseErrorCode`) and centralized handling (`ErrorHandler`).
- **Usage**:
  - Use `ErrorHandler.tryCatch` to wrap operations that might fail, automatically logging errors with context.
  - Throw `McpError` for specific, categorized errors using `BaseErrorCode` and passing the current context.

```typescript
import { ErrorHandler } from './src/utils/errorHandler.js';
import { McpError, BaseErrorCode } from './src/types-global/errors.js';
import { RequestContext } from './src/utils/requestContext.js';

async function performTask(input: any, context: RequestContext) {
  return await ErrorHandler.tryCatch(
    async () => {
      if (!input) {
        // Pass context when throwing McpError
        throw new McpError(BaseErrorCode.VALIDATION_ERROR, "Input cannot be empty", context);
      }
      // ... perform task logic ...
      const result = await someAsyncOperation(input);
      logger.info("Task completed successfully", context);
      return result;
    },
    {
      // Context for the ErrorHandler itself
      operation: 'performTask',
      context: context,
      input: input, // Input is automatically sanitized for logging by ErrorHandler
      errorCode: BaseErrorCode.INTERNAL_ERROR, // Default code if an unexpected error occurs
      critical: false // Set to true if failure should halt the process
    }
  );
}
```

- **Key Files**:
  - `src/types-global/errors.ts`: Defines `McpError` class and `BaseErrorCode` enum.
  - `src/utils/errorHandler.ts`: Provides `ErrorHandler.tryCatch` and `handleError`.

### 3. Request Context (`src/utils/requestContext.ts`)

- **Purpose**: Track and correlate operations related to a single request or workflow using a unique `requestId`. Ensures logs and errors can be traced back to their origin.
- **Usage**:
  - Create context at the beginning of an operation using `requestContextService.createRequestContext`.
  - Pass the context object down through function calls.
  - Include the context object when logging or creating `McpError` instances.

```typescript
import { requestContextService, RequestContext } from './src/utils/requestContext.js';
import { logger } from './src/utils/logger.js';

function handleIncomingRequest(requestData: any) {
  // Create context at the entry point
  const context: RequestContext = requestContextService.createRequestContext({
    operation: 'HandleIncomingRequest',
    // Add any other relevant initial context details
    initialData: requestData.id
  });

  logger.info("Received request", context);
  // Pass context down the call stack
  processSubTask(requestData.payload, context);
}

function processSubTask(payload: any, parentContext: RequestContext) {
  // Can create a derived context for more specific logging if needed,
  // or simply pass the parent context along.
  const subTaskContext = { ...parentContext, subOperation: 'ProcessSubTask' };
  logger.debug("Processing sub-task", subTaskContext);
  // ... logic ...
}
```

- **Key Files**:
  - `src/utils/requestContext.ts`: Defines `RequestContext` interface and the `requestContextService` singleton.

### 4. ID Generation (`src/utils/idGenerator.ts`)

- **Purpose**: Generate unique, prefixed IDs for different entity types (e.g., request IDs, operation IDs). Uses nanoid for randomness.
- **Usage**: Import the singleton `idGenerator` instance. Configure prefixes (optional) and use `idGenerator.generateForEntity`.

```typescript
import { idGenerator } from './src/utils/idGenerator.js';

// Configure prefixes (e.g., during initialization in config or startup)
idGenerator.setEntityPrefixes({
  request: 'REQ',
  operation: 'OP'
});

// Generate IDs
const requestId = idGenerator.generateForEntity('request'); // e.g., "REQ_A6B3J0K9" (default length 8)
const operationId = idGenerator.generateForEntity('operation', { length: 6 }); // e.g., "OP_C9D4E1"

// Validate IDs (checks prefix and format)
const isValidReq = idGenerator.isValid(requestId, 'request'); // true
const isValidOp = idGenerator.isValid(operationId, 'operation'); // true
```

- **Key Files**:
  - `src/utils/idGenerator.ts`: `IdGenerator` class and the default `idGenerator` instance.

### 5. Sanitization (`src/utils/sanitization.ts`)

- **Purpose**: Clean and validate input data (HTML, paths, numbers, URLs, JSON) to prevent security issues like XSS or path traversal, and ensure data integrity.
- **Usage**: Import the singleton `sanitization` instance and use its methods.

```typescript
import { sanitization } from './src/utils/sanitization.js';

// Sanitize HTML
const unsafeHtml = '<script>alert("xss")</script><p>Safe content</p>';
const safeHtml = sanitization.sanitizeHtml(unsafeHtml); // Result: "<p>Safe content</p>"

// Sanitize file paths (prevents traversal)
const unsafePath = '../../etc/passwd';
const projectRoot = '/Users/casey/Developer/github/filesystem-mcp-server'; // Example root
try {
  // Ensures path stays within the project/allowed directory
  const safePath = sanitization.sanitizePath(unsafePath, { rootDir: projectRoot });
} catch (error) {
  // Handles McpError (BaseErrorCode.VALIDATION_ERROR) if path is invalid/unsafe
  logger.error("Invalid path detected", { error: error.message, unsafePath });
}

// Sanitize numbers (trims, parses, checks range)
const userInput = " 123.45 ";
const num = sanitization.sanitizeNumber(userInput, { min: 0, max: 1000 }); // 123.45

// Sanitize objects for logging (removes sensitive fields like passwords, tokens)
const sensitiveData = { user: 'admin', password: 'pwd', token: 'abc', safeField: 'data' };
const safeLogData = sanitization.sanitizeForLogging(sensitiveData);
// safeLogData = { user: 'admin', password: '[REDACTED]', token: '[REDACTED]', safeField: 'data' }
```

- **Key Files**:
  - `src/utils/sanitization.ts`: `Sanitization` class and the `sanitization` instance.

### 6. Rate Limiting (`src/utils/rateLimiter.ts`)

- **Purpose**: Control the frequency of operations per key (e.g., per user, per IP) to prevent abuse or overloading resources. Uses `limiter` package.
- **Usage**: Import the `rateLimiter` instance. Use `rateLimiter.execute(key, async () => { ... }, context)`.

```typescript
import { rateLimiter } from './src/utils/rateLimiter.js';
import { RequestContext } from './src/utils/requestContext.js';
import { McpError, BaseErrorCode } from './src/types-global/errors.js'; // Import McpError and BaseErrorCode

async function handleUserAction(userId: string, context: RequestContext) {
  try {
    const result = await rateLimiter.execute(
      `user_action_${userId}`, // Unique key for the rate limit bucket (e.g., based on user ID)
      async () => {
        // ... perform the actual operation ...
        logger.debug("Executing rate-limited action", { ...context, userId });
        return await someUserSpecificOperation(userId);
      },
      context // Pass context for logging within the rate limiter
    );
    // Handle successful result
    logger.info("User action completed successfully", { ...context, userId });
    return result;
  } catch (error) {
    // Handle rate limit exceeded error (McpError with BaseErrorCode.RATE_LIMIT_EXCEEDED)
    // or other errors thrown from the operation itself.
    if (error instanceof McpError && error.code === BaseErrorCode.RATE_LIMIT_EXCEEDED) {
      logger.warn("Rate limit exceeded for user action", { ...context, userId });
      // Optionally re-throw or return a specific response
      throw error; // Re-throw to propagate the rate limit error
    } else {
      // Log other errors using the errorHandler or logger directly
      logger.error("Error during rate-limited user action", { ...context, userId, error: error.message });
      // Let ErrorHandler.tryCatch (if used upstream) handle this, or throw
      throw error;
    }
  }
}
```

- **Key Files**:
  - `src/utils/rateLimiter.ts`: `RateLimiter` class and the `rateLimiter` instance.

## Adding New Features

### Adding a Tool

1.  **Directory**: Create a new directory `src/mcp-server/tools/yourToolName/`.
2.  **Logic (`yourToolNameLogic.ts`)**:
    *   Define input (`YourToolInput`) and output (`YourToolOutput`) TypeScript types/interfaces.
    *   Use Zod (`zod`) to create a validation schema (`YourToolInputSchema`) for the input arguments. Export both the schema and the input type.
    *   Implement the core processing function: `async function yourToolLogic(input: YourToolInput, context: RequestContext): Promise<YourToolOutput>`.
    *   Use core utilities (`logger`, `errorHandler`, `serverState`, `sanitization` etc.) within the logic function. Use the passed `RequestContext` for logging and error context.
    *   Throw `McpError` for expected errors (validation, not found, etc.). Let `ErrorHandler` catch unexpected errors.
3.  **Registration (`registration.ts`)**:
    *   Import `McpServer` from the SDK, the logic function (`yourToolLogic`), the input schema (`YourToolInputSchema`), the input type (`YourToolInput`), and necessary utilities (`ErrorHandler`, `logger`, `requestContextService`, `BaseErrorCode`).
    *   Define an async registration function: `export const registerYourTool = async (server: McpServer): Promise<void> => { ... };`.
    *   Inside, create a `registrationContext` using `requestContextService`.
    *   Wrap the core registration logic in `ErrorHandler.tryCatch` for robust startup.
    *   Call `server.tool(toolName: string, description: string, inputSchemaShape: z.ZodRawShape, handler: async (params: unknown, extra: McpCallToolExtra) => Promise<McpToolResponse>)`.
        *   Pass the Zod schema's `.shape` property to `server.tool`.
        *   The `handler` function receives raw `params` and `extra`.
        *   Inside the `handler`:
            *   Create a `callContext` using `requestContextService`, potentially linking to `registrationContext.requestId` or `extra.requestId`.
            *   Cast `params` to your specific input type (`YourToolInput`).
            *   Wrap the call to your `yourToolLogic` function within another `ErrorHandler.tryCatch`. Pass the typed params and `callContext`. Redact sensitive input fields for logging within the `ErrorHandler` options.
            *   Log entry, success, and errors using the `callContext`.
            *   Format the successful result from `yourToolLogic` into the expected MCP `McpToolResponse` format (e.g., `{ content: [{ type: 'text', text: result.message }] }`).
4.  **Index (`index.ts`)**: Export the registration function: `export { registerYourTool } from './registration.js';`.
5.  **Server (`src/mcp-server/server.ts`)**:
    *   Import the registration function (`registerYourTool`) from `src/mcp-server/tools/yourToolName/index.ts`.
    *   Call the imported registration function within the `createMcpServer` async function, passing the `server` instance: `await registerYourTool(server);`.

### Adding a Resource

*(Note: Resources are generally less flexible than tools. Prefer tools for actions or dynamic data retrieval. Resources are better suited for relatively static data or simple lookups based on a URI pattern.)*
1.  **Directory**: Create `src/mcp-server/resources/yourResourceName/`.
2.  **Logic (`yourResourceLogic.ts`)**: Define the core processing function that takes `uri: URL` and `context: ResourceContext`.
3.  **Registration (`registration.ts`)**:
    *   Import logic, `ResourceRegistration`, `ResourceTemplate`, `ResourceMetadata`, `ResourceContext`, `ErrorHandler`, etc.
    *   Define the `ResourceTemplate` (URI pattern like `filesystem://file/{filePath}`).
    *   Define `ResourceMetadata` (name, description, mimeType).
    *   Define the `ResourceRegistration` object including template, metadata, and the handler.
    *   Implement the `handler` function, wrapping logic in `ErrorHandler.tryCatch`. It receives `uri` and `context`. Return `{ contents: [{ uri, mimeType, text }] }`.
4.  **Index (`index.ts`)**: Export the `ResourceRegistration` object.
5.  **Server (`src/mcp-server/server.ts`)**: Import and add the registration object to the `resources` array passed to `server.registerResources()`.

## Key File Locations

- **Main Entry**: `src/index.ts` (Initializes server, handles startup/shutdown signals, top-level error handling)
- **Server Setup**: `src/mcp-server/server.ts` (Creates MCP Server instance, registers tools/resources)
- **Configuration**: `src/config/index.ts` (Loads environment variables, package info, sets up config object)
- **Global Types**: `src/types-global/` (Contains shared types like `errors.ts`, `mcp.ts`, `tool.ts`)
- **Utilities**: `src/utils/` (Contains core helper modules: `logger.ts`, `errorHandler.ts`, `rateLimiter.ts`, `requestContext.ts`, `idGenerator.ts`, `sanitization.ts`)
- **Tools**: `src/mcp-server/tools/` (Each subdirectory contains logic, registration, and index for a specific tool, e.g., `src/mcp-server/tools/readFile/`)
- **Resources**: `src/mcp-server/resources/` (Currently none implemented, but would follow a similar structure to tools if added)

Remember to keep this cheatsheet updated as the codebase evolves! Add new tools and utilities as they are developed.
